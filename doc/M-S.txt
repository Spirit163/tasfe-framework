SQL的读写分离方案，是一种通用的设计，通常可以较好的提升数据库集群的整体负载能力，当一个MySQL实例无法支撑客户端的读写负载时，我们首先会想到对数据库进行“读写分离”
1）在数据库的架构层面，我们使用M-S架构模式，即一主多从，Master主要用于处理write、transaction等核心操作，这些操作必须发生在master上，否则将会导致数据一致性问题。对于slaves，通常用于分流read操作，对于那些对数据实时性要求不高、批量读取、SLOW SQL等操作，我们应该将它们分配到slaves中。

2）能进行读写分离的前提，一个非常重要的指标，就是“集群的R:W比较高”，即较多的read、较少的write，如果读写比很低，读写分离所产生的收益，将是比较微弱的。

3）从架构的视角考虑，Master与slave在整个timeline中，所需要处理的物理write操作是相同的，即在master上发生一个write操作，此操作也必将在slaves上发生（可能时间线不一致，但是最终一定会发生，这取决于binlog和mysql IO线程的处理效率）。因此，粗略来讲，slaves所面对的writes负载与master一致。这也限定我们，“读写比较低”的应用场景下，读写分离收益较低的原因。

4）slaves机器的物理性能，应该与master保持一致，甚至可以更好，毕竟，大量的reads操作需要等待slaves去处理，这些load是master所不会面对的。